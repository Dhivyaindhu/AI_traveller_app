# -*- coding: utf-8 -*-
"""Untitled143.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vsyUGX1MQjloFU7iw97HBFJq-PnpuF-v
"""

import streamlit as st
from langchain_core.prompts import ChatPromptTemplate
from langchain_gemini import ChatGemini
from langchain_core.output_parsers import StrOutputParser

# Define Chat Prompt
chat_template = ChatPromptTemplate.from_messages([
    ("system", "You are an AI assistant who gives approximated cost of travel from source to destination for all modes of transportation. Provide a representation of estimated cost, distance, and cost breakdown. Also, recommend major places at the destination."),
    ("human", "Book a flight, train, bus, or travel by car from {source} to {destination}.")
])

# Initialize Gemini Model
gemini_API_KEY = "AIzaSyCBxouxQ_5gN9ikG_RK9a6WNUotzglMVmE"
chat_model = ChatGemini(api_key=gemini_API_KEY, model="gemini-1.5-flash")

# Define Output Parser
parser = StrOutputParser()

# Create the Chain
chain = chat_template | chat_model | parser

# Streamlit UI
st.title("Travel Cost Estimator AI")

source = st.text_input("Enter Source Location")
destination = st.text_input("Enter Destination Location")

if st.button("Get Travel Cost Estimate"):
    if source and destination:
        response = chain.invoke({"source": source, "destination": destination})  # Pass as dictionary
        st.write("### Estimated Travel Details:")
        st.write(response)
    else:
        st.warning("Please enter both source and destination.")